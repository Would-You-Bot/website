
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// For mongodb specific schema docs, read this: https://www.prisma.io/docs/orm/overview/databases/mongodb

enum PackType {
  wouldyourather
  neverhaveiever
  whatwouldyoudo
  truth
  dare
  topic
  mixed
}

enum Status {
  pending
  resubmit_pending
  approved
  denied
}

model QuestionPack {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId    String   @db.String
  type        PackType
  name        String   @db.String
  description String   @db.String
  tags        String[]
  popular     Boolean
  language    String   @db.String
  likes       String[]
  questions   Json[]
  status      Status   @default(pending)
  nsfw        Boolean  @default(false) // Important for the future not used yet
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Indexes for better query performance
  @@index([type])
  @@index([tags])
  @@index([name])
  @@map("questionpacks")
}

type Used {
  command Int @default(0)
  replay  Int @default(0)
}

type GameStats {
  yes       Int?  @default(0)
  no        Int?  @default(0)
  used      Used?
  highscore Int?  @default(0)
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  userID           String     @unique
  votePrivacy      Boolean    @default(false)
  profilePrivacy   Boolean    @default(false)
  likedPackPrivacy Boolean    @default(false)
  language         String     @default("en_EN")
  wouldyourather   GameStats?
  neverhaveiever   GameStats?
  higherlower      GameStats?
  whatwouldyoudo   GameStats?
  truth            Used?
  dare             Used?
  random           Used?
  topic            Used?
  avatarUrl        String?
  bannerUrl        String?
  description      String?
  displayName      String?
  globalName       String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  sessions Session[]
  accounts Account[]

  email         String?
  emailVerified Boolean @default(false)

  @@map("usermodels")
}

// Authentication models

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
